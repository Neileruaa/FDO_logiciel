{% extends 'base.html.twig' %}

{% block title %}{{ row.competition.title }}{% endblock %}

{% block body %}
    <h1>Finale</h1>
    <hr>
    <h2><strong>{{ row.dance.nameDance }}</strong> | <strong>{{ row.formation }}</strong></h2>
    <h3><strong>{{ row.category.nameCategory }}</strong></h3><br>
    <table class="table table-responsive">
        <thead class="thead-dark">
        <tr>
            <th>Équipes/Juges</th>

            {% set tabJuges=[] %}
            {% set alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] %}
            {% for judge in range(0,row.nbJudge-1) if judge is not empty %}
                {% set tabJuges = tabJuges|merge([alphabet[judge]]) %}
                <th id="{{ alphabet[judge] }}">{{ alphabet[judge] }}</th>
            {% endfor %}

        </tr>
        </thead>
        <tbody>
        {% set nbEquipes=0 %}
        {% for team in row.teams if team is not empty %}
            {% set nbEquipes=nbEquipes+1 %}
            <tr>
                <td><strong>{{ team.numDossard }}</strong></td>
                {% for judge in range(0,row.nbJudge-1) if judge is not empty %}
                    <td>
                        <select id="{{ team.id }}{{ alphabet[judge] }}" name="selectPlace" >
                            {% set place=1 %}
                            {% for team in row.teams if team is not empty %}
                                <option value="{{ place }}">{{ place }}</option>
                                {% set place=place+1 %}
                            {% endfor %}
                        </select>
                    </td>
                {% endfor %}
            </tr>
        {% endfor %}
        </tbody>
    </table>


    {% set tabEquipes=[] %}

    {% for team in row.teams if team is not empty %}
        {% set tabEquipes = tabEquipes|merge([team.id]) %}
    {% endfor %}

    {% set tabJuges=tabJuges|json_encode()|raw %}
    {% set tabEquipes=tabEquipes|json_encode()|raw %}

    <button class="btn btn-info" name="valider"
            onclick="calculeClassement( {{ tabJuges }} , {{ tabEquipes }} , {{ row.id }})">
        Calculer</button>
    <hr><br>

    <h2>Résultats</h2>
    <table class="table table-responsive">
        <thead class="thead-dark">
        <tr>
            <th style="visibility:hidden; border: none;"> </th>
            <th colspan="{{ nbEquipes }}">places</th>
            <th rowspan="2" style="vertical-align: middle;">RANG</th>
        </tr>
        <tr>
            <th>Équipes</th>
            {% set numTeam=0 %}
            {% for team in row.teams if team is not empty %}
                {% set numTeam=numTeam+1 %}
                <th>1
                    {% if numTeam>1 %}
                        - {{ numTeam }}
                    {% endif %}
                </th>
            {% endfor %}
        </tr>
        </thead>
        <tbody>
        {% set numTeam=0 %}
        {% for team in row.teams if team is not empty %}
            <tr>
                <td><strong>{{ team.numDossard }}</strong></td>
                {% set numTeam=numTeam+1 %}
                {% set index=0 %}
                {% for t in row.teams if t is not empty %}
                    {% set index=index+1 %}
                    <td>
                        <input id="p{{ index }}-{{ team.id }}" type="text" style="width:2.5em;" disabled><br>
                    </td>
                {% endfor %}
                <td><input id="res{{ team.id }}" type="text" style="color:red;width:2.5em;border:none;background: none;text-align: center;font-weight: bold;" disabled></td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    <a id="impression" href="{{ path('Final.resultats',{id: row.id}) }}" style="display: none;margin: auto;" class="btn btn-success">Résultats</a>

{% endblock %}

{% block javascripts %}
    {{ parent() }}

    <script type="text/javascript">
        var resultatEquipes=[];
        var resultatEquipesFinal=[];
        var podium=[];
        var valDefautPlace=0;
        var col=0;
        var egaliteTotal=[];
        var majorite=0;
        var cptRecurMajorite=0;
        var auDessusMajorite=[];

        var equipesGlobal=[];

        var gagnants=[];
        function calculeClassement(juges,equipes,row){
            equipesGlobal=equipes;
            cptRecurMajorite=0;
            gagnants=[];
            majorite=parseInt(juges.length/2)+1;

            if (podium.length!=0) {
                podium=[];
                valDefautPlace=0;
                col=0;
                auDessusMajorite=[];
            }
            if(!initTabResultatEquipeFinal(juges,equipes)){
                return false;
            }
            // calcule du classement

            for (let i = 0; i < equipes.length; i++) {
                var indexPlace=0;
                for (let j = 0; j < equipes.length; j++) {
                    indexPlace++;
                    document.getElementById("p"+(j+1)+"-"+equipes[i]).value=resultatEquipesFinal[i][j];
                }
            }

            podium=new Array(equipes.length);

            egaliteTotal=new Array(equipes.length);
            while (valDefautPlace<equipes.length){
                recur(equipes,col);
            }
            // update affichage avec podium

            var tableauPodium=new Array(equipes.length);
            for(let i = 0; i < podium.length; i++) {
                tableauPodium[i]=new Array(2);
                tableauPodium[i][0]=podium[i];
                if (egaliteTotal[equipes.indexOf(podium[i])] != null){
                    document.getElementById("res"+podium[i]).value=egaliteTotal[equipes.indexOf(podium[i])]+1.5;
                    tableauPodium[i][1]=egaliteTotal[equipes.indexOf(podium[i])]+1.5;
                }else{
                    document.getElementById("res"+podium[i]).value=i+1;
                    tableauPodium[i][1]=i+1;
                }
            }

            $.post( "{{ path('Final.classement') }}", { finale: tableauPodium, rowId: row} )
            .done(function( data ) {
                classement=data.classement;
                row=data.row;
                $('#impression').css('display','block');
                })
                ;

            return true;
        }

        function recur(equipes,colonne){
            for(let i = 0; i < equipes.length ; i++) {
                if(!scanValDejaEntree(podium,equipes[i])){
                    continue; // on va voir à l'equipe suivante (iteration suivante)
                }
                compareResultat(equipes,colonne,equipes[i]);
                var resComp=gagnants.slice();
                if (resComp.length==1){
                    podium[valDefautPlace]=resComp[0];
                    // on efface les colonnes inutiles du tableau resultatEquipeFinal
                    effaceColonnes(equipesGlobal,resComp[0],colonne+cptRecurMajorite);
                    valDefautPlace++;
                    col++;
                    if(auDessusMajorite.length>1){
                        col--;
                        cptRecurMajorite=0;
                        recur(auDessusMajorite,colonne);
                        break;
                    }
                    cptRecurMajorite=0;
                    break;
                } else if(resComp.length>1){
                    if (valDefautPlace==0 && colonne==0){ // si on est à la premiere colonne
                        // on regarde colonne d'après de ceux à egalité
                        recur(resComp,colonne+1);
                        break;
                    }else{
                        // si le marquage ne donne rien on fait une recurtion
                        marquageEquipe(resComp,colonne+cptRecurMajorite,true);
                        cptRecurMajorite=0;
                        break;
                    }
                }
            }
        }

        function effaceColonnes(equipes,indexEquipe,colonne){
            for(let i = 0; i < resultatEquipesFinal[0].length; i++) {
                if (i<=colonne && resultatEquipesFinal[equipes.indexOf(indexEquipe)][i]!=0){
                    document.getElementById("p"+(i+1)+"-"+indexEquipe).value=resultatEquipesFinal[equipes.indexOf(indexEquipe)][i];
                }else{
                    document.getElementById("p"+(i+1)+"-"+indexEquipe).value=null;
                }
            }
        }

        function compareResultat(equipes,colonne,indexEquipe){
            var resIndex=resultatEquipesFinal[(equipesGlobal.indexOf(indexEquipe))][colonne];
            gagnants=[];
            var totalStop=false;

            gagnants.push(indexEquipe);


            auDessusMajorite=[];
            if(resIndex>=majorite){
                auDessusMajorite.push(indexEquipe);
            }

            equipes.forEach(function(i) {
                if ((i==indexEquipe) || (!scanValDejaEntree(podium,i))
                    || (resIndex>resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne] && !totalStop)
                    ){
                    if(resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne]>=majorite && i!=equipesGlobal.indexOf(indexEquipe)){
                        auDessusMajorite.push(i);
                    }
                }else if(resIndex==resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne] && !totalStop){
                    if(resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne]>=majorite && i!=indexEquipe){
                        auDessusMajorite.push(i);
                    }
                    gagnants.push(i);
                }else if(!totalStop){
                    gagnants=[];
                    resIndex=resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne];
                    if(resIndex>=majorite){
                        auDessusMajorite.push(indexEquipe);
                    }
                    indexEquipe=i;
                    gagnants.push(i);
                }
            });


            if (gagnants.length>=1 && resIndex<majorite){
                cptRecurMajorite++;
                console.log("recur compare");
                compareResultat(equipes,colonne+1,indexEquipe); // on continu de chercher
            }

        }

        function marquageEquipe(equipes,colonne,boolAffiche=true){
            var somme=0;
            var min=9999;
            var equipesAEgaliteMeilleur=[];
            var equipesAEgalite=[];
            var equipesNonEgaux=[];
            var tabSomme=[];
            var gagnants=equipes;

            cptRecurMajorite=0;

            equipes.forEach(function(i) {
                if(scanValDejaEntree(podium,i)){
                    for(let j = 0; j <= colonne; j++) {
                        somme=somme+(j+1)*resultatEquipes[equipesGlobal.indexOf(i)][j];
                    }
                    if(boolAffiche){
                        resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne]=resultatEquipesFinal[equipesGlobal.indexOf(i)][colonne]+"("+somme+")";
                    }
                    tabSomme.push(somme);
                    somme=0;
                }
            });

            for(let i = 0; i < tabSomme.length; i++) {
                if (tabSomme[i]<min){
                    if(equipesAEgaliteMeilleur.length>1){ // si plusieurs egalité non "meilleur"
                        equipesAEgaliteMeilleur=equipesAEgaliteMeilleur.concat(equipesAEgalite);
                        equipesAEgalite=equipesAEgaliteMeilleur;
                    }
                    equipesAEgaliteMeilleur=[]; // on remet a zero
                    min=tabSomme[i];
                    var equipeSauv1=gagnants[i];
                    gagnants.splice(i,1); // on retire l'equipe a la place gagnants.indexOf(i)
                    gagnants.unshift(equipeSauv1); // on met l'equipe i en premiere position
                    var sommeSauv1=tabSomme[i];
                    tabSomme.splice(i,1);
                    tabSomme.unshift(sommeSauv1);
                    equipesAEgaliteMeilleur.push(equipeSauv1);
                }else if(tabSomme[i]==min){
                    var equipeSauv=gagnants[i];
                    gagnants.splice(i,1);
                    gagnants.unshift(equipeSauv);
                    var sommeSauv=tabSomme[i];
                    tabSomme.splice(i,1);
                    tabSomme.unshift(sommeSauv);
                    equipesAEgaliteMeilleur.push(equipeSauv);
                }else{
                    var tab=tabSomme.slice(); // le retire du tabSomme pas bien
                    tab.splice(i,1);
                    if (!scanValDejaEntree(tab,i)){ //i in tab
                        equipesAEgalite.push(gagnants[i]);
                    }else{
                        equipesNonEgaux.push(gagnants[i]);
                    }
                }
            }


            if (equipesAEgaliteMeilleur.length>1){
                if (colonne+1>resultatEquipesFinal[0].length-1){
                    var sauvValInsert=valDefautPlace;
                    equipes.forEach(function(i) {
                        if (!scanValDejaEntree(equipesAEgaliteMeilleur,i)){ //i in equipesAEgaliteMeilleur
                            podium[sauvValInsert]=i;
                            egaliteTotal[equipesGlobal.indexOf(i)]=valDefautPlace;
                            effaceColonnes(equipesGlobal,i,colonne);
                            sauvValInsert++;
                        }
                    });
                    valDefautPlace=valDefautPlace+equipesAEgaliteMeilleur.length;
                    col++;
                }else{
                    recur(equipesAEgaliteMeilleur,colonne+1);
                }
            }else if(equipesAEgaliteMeilleur.length==0){
                return;
            }else{
                equipes.forEach(function(i) {
                    if (!scanValDejaEntree(equipesAEgaliteMeilleur,i)){ //i in equipesAEgaliteMeilleur
                        podium[valDefautPlace]=i;
                        effaceColonnes(equipesGlobal,i,colonne);
                    }
                });
                valDefautPlace++;
                col++;
            }

            if(equipesAEgalite.length==0 && equipesNonEgaux.length>0){
                col--;
                marquageEquipe(equipesNonEgaux,colonne,false);
            }else if(equipesAEgalite.length>0 && equipesNonEgaux.length==0){
                // egalite
                recur(equipesAEgalite,colonne+1);
            }else if(equipesAEgalite.length>0 && equipesNonEgaux.length>0){ // si il y a des egalités et des equipes non egaux
                recur(equipesAEgalite.concat(equipesNonEgaux),colonne);
            }
        }

        function initTabResultatEquipeFinal(juges,equipes){
            // si le tableau des juges est incorrecte par ex: un juge rentre 2 premiers, etc
            // on initialise pas le tableau
            if(!check(juges,equipes)){
                return false;
            }

            resultatEquipesFinal= new Array(equipes.length);
            for (let i = 0; i < equipes.length; i++) {
                resultatEquipesFinal[i]=new Array(equipes.length);
                for (let j = 0; j < equipes.length; j++) {
                    resultatEquipesFinal[i][j]=0;
                }
            }

            for (let i = 0; i < equipes.length; i++) {
                for (let j = 0; j < juges.length; j++) {
                    let valJugeI=parseInt(resultatEquipes[i][j]);
                    // on fait -1 car on a les index du tableau vont de 0 à nbEquipes-1
                    // et pas de 1 à nbEquipes
                    resultatEquipesFinal[i][valJugeI-1]++;
                }
            }


            var suiteResultatParJuges=resultatEquipes;
            resultatEquipes=resultatEquipesFinal;
            // on remet à zero
            resultatEquipesFinal= new Array(equipes.length);
            for (let i = 0; i < equipes.length; i++) {
                resultatEquipesFinal[i]=new Array(equipes.length);
                for (let j = 0; j < equipes.length; j++) {
                    resultatEquipesFinal[i][j]=0;
                }
            }

            for (let i = 0; i < equipes.length; i++) {
                remplirResultatEquipesFinal(suiteResultatParJuges,i,juges.length,equipes.length,resultatEquipesFinal);
            }
            return true;
        }

        function remplirResultatEquipesFinal(resultatEquipes,indexEquipe,nbJuges,nbEquipes,resultatEquipesFinal){
            for (let i = 0; i < nbJuges; i++) {
                let valJugeI=parseInt(resultatEquipes[indexEquipe][i]);
                resultatEquipesFinal[indexEquipe][valJugeI-1]++;
                // on fait +1 a tout ceux d'après pour avoir le nb de fois que
                // l'equipe a été dans le top 2, top 3 etc.
                for (let j = valJugeI; j < nbEquipes; j++) {
                    resultatEquipesFinal[indexEquipe][j]++;
                }
            }
        }

        function check(juges,equipes){
            resultatEquipes= new Array(equipes.length);
            for (let i = 0; i < equipes.length; i++) {
                resultatEquipes[i]=new Array(equipes.length);
                for (let j = 0; j < juges.length; j++) {
                    resultatEquipes[i][j]=document.getElementById(""+equipes[i]+juges[j]+"").value;
                }
            }


            var erreurJuges=[];
            for (let i = 0; i < juges.length; i++) {
                if(!verifEntreJugeCorrecte(resultatEquipes,i)){
                    erreurJuges.push(document.getElementById(""+juges[i]+"").innerHTML);
                }
            }
            if(erreurJuges.length===0){
                return true;
            }else{
                alert("Tableau incorrecte pour le juge "+erreurJuges.toString());
                return false;
            }
        }

        function verifEntreJugeCorrecte(resultatEquipes,indexJuge){
            var valEntreeJuge=[];
            for (let i = 0; i < resultatEquipes.length; i++) {
                if(scanValDejaEntree(valEntreeJuge,parseInt(resultatEquipes[i][indexJuge],10))){
                    valEntreeJuge[i]=parseInt(resultatEquipes[i][indexJuge],10);
                }else if(!scanValDejaEntree(valEntreeJuge,parseInt(resultatEquipes[i][indexJuge],10))){
                    return false;
                }else{
                    alert("Une erreur inatendue est survenue !");
                }
            }
            valEntreeJuge=null;
            return true;
        }

        function scanValDejaEntree(tab,val){
            for (let i = 0; i < tab.length; i++) {
                if(val==tab[i]){
                    return false;
                }
            }
            return true;
        }
    </script>
{% endblock %}